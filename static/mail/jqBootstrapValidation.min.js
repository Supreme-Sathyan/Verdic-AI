/*!
 * jqBootstrapValidation v1.3.7
 * A plugin for client-side validation in Bootstrap forms.
 * https://github.com/ReactiveRaven/jqBootstrapValidation
 */
(function($) {
    "use strict";

    $.fn.jqBootstrapValidation = function(method) {
        var defaults = {
            // Default options
            preventSubmit: true,
            submitError: false,
            submitSuccess: false,
            filter: function() {
                return $(this).is(":visible");
            }
        };

        var methods = {
            init: function(options) {
                var settings = $.extend(true, {}, defaults, options);

                return this.each(function() {
                    var $form = $(this);

                    $form.find("input,textarea,select").not("[type=submit],[type=reset],[type=hidden],[disabled]")
                        .filter(settings.filter)
                        .each(function() {
                            var $input = $(this);

                            // Add validation logic here
                            $input.on("input change", function() {
                                var isValid = $input.val().trim() !== "";
                                $input.toggleClass("is-invalid", !isValid);
                                $input.toggleClass("is-valid", isValid);
                            });
                        });

                    if (settings.preventSubmit) {
                        $form.on("submit", function(e) {
                            var isValid = true;

                            $form.find("input,textarea,select").not("[type=submit],[type=reset],[type=hidden],[disabled]")
                                .filter(settings.filter)
                                .each(function() {
                                    var $input = $(this);
                                    if ($input.hasClass("is-invalid")) {
                                        isValid = false;
                                    }
                                });

                            if (!isValid) {
                                e.preventDefault();
                                if (settings.submitError) {
                                    settings.submitError($form);
                                }
                            } else if (settings.submitSuccess) {
                                settings.submitSuccess($form);
                            }
                        });
                    }
                });
            }
        };

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === "object" || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error("Method " + method + " does not exist on jqBootstrapValidation");
        }
    };
})(jQuery);